{"version":3,"sources":["components/Header/Header.js","components/GameCard/GameCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","currentPoint","highScore","Game","onClick","onsushiclick","name","src","img","App","state","points","tiles","clickedTiles","shuffle","currentTile","_this","newTile","length","push","splice","Math","floor","random","_onSushiClick","sushiName","includes","setState","newClickedTiles","_this2","this","components_Header_Header","map","item","i","GameCard_GameCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f93d034.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = (props) => {\n  return(\n    <nav className=\"navbar navbar-fixed-top sushiNav\">\n      <div>\n        <h3>It's time to eat some goddamn sushi, don't eat more than the same one. What are you waiting for?</h3>\n        <small className={(props.message === \"Ack, told ya not to do that, you just pooped your pants!\") ? \"sushiMess2\":\"sushiMess\"}>{(props.message === \"\") ? \"You can only eat one of each though, or suffer the consequences.\":props.message}</small>\n      </div>\n      <span>Points :<span>{props.currentPoint}</span> | High Score : {props.highScore}</span>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./GameCard.css\";\n\nconst Game = (props) => {\n  return(\n    <div className=\"sushiCard\" onClick={props.onsushiclick}>\n      <h2>{props.name}</h2>\n      <img src={props.img} className=\"sushiImg img-fluid img-thumbnail\" />\n    </div>\n  );\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header.js\";\nimport GameCard from \"./components/GameCard/GameCard.js\"\n\nclass App extends Component {\n  state = {\n    points: 0,\n    highScore: 0,\n    tiles: [{name:\"Sake\",img:\"https://media1.popsugar-assets.com/files/thumbor/pSKtIjG5_7-iQ1rCipmnM0wN37E/fit-in/1024x1024/filters:format_auto-!!-:strip_icc-!!-/2014/02/18/162/n/28443503/73fff5022e19a6fc_shutterstock_97913285/i/Salmon-Nigiri.jpg\"},\n    {name:\"Toro\",img:\"https://tracychang.files.wordpress.com/2010/10/img_8756.jpg\"},\n    {name:\"Aji\",img:\"http://i0.wp.com/www.foodrepublic.com/wp-content/uploads/2016/09/4192186354_384534ddd8_o.jpg?resize=700%2C525\"},\n    {name:\"Hamachi\",img:\"https://sushiday.com/wp-content/2008/05/yellowtailnigiri-1620x1156.jpg\"},\n    {name:\"Iwashi\",img:\"http://cdn.heysesame.com/wp-content/uploads/30011956/Japanese-Iwashi-Sardine-nigiri-680x907.jpg\"},\n    {name:\"Tsukiji\",img:\"https://c1.staticflickr.com/3/2515/5749600372_70b7a06d3f_b.jpg\"},\n    {name:\"Uni\",img:\"https://s3.amazonaws.com/bucket.leye.co/uploads/2009/01/Naoki-Sushi_Japanese-Uni-Nigiri-07-1.jpg\"},\n    {name:\"Ikuro\",img:\"https://i.pinimg.com/originals/eb/cf/0f/ebcf0f089ef3d5cca1684634b04f02fc.jpg\"},\n    {name:\"Saba\",img:\"https://eatcleanme.com/media/catalog/product/m/i/miyabi-order_healthy_food_dubai-saba_nigiri.jpg\"},\n    {name:\"Engawa\",img:\"https://media-cdn.tripadvisor.com/media/photo-s/07/37/fd/0d/hirame-no-engawa-nigiri.jpg\"},\n    {name:\"Kisu\",img:\"https://adelewong.files.wordpress.com/2015/01/img_1894_fotor.jpg\"},{name:\"Kohada\",img:\"https://i.pinimg.com/originals/07/b5/bc/07b5bcc95aff57b0ae7007641771e496.jpg\"},{name:\"Katsuo\",img:\"https://orange.japan-talk.com/images/jt/thumbnails/Katsuo-sushi-205.jpg\"},{name:\"Suzuki\",img:\"https://i.redd.it/34mb2jf87zx01.jpg\"},{name:\"Sayori\",img:\"https://media-cdn.tripadvisor.com/media/photo-s/07/0a/ec/b2/iwashi-nigiri.jpg\"},{name:\"Kuruma\",img:\"https://orange.japan-talk.com/images/jt/thumbnails/Kuruma-sushi-205.jpg\"}],\n    clickedTiles: [],\n    message: \"\"\n  }\n\n  shuffle = () => {\n    let currentTile = this.state.tiles;\n    let newTile = [];\n    while(currentTile.length > 0){\n      newTile.push(currentTile.splice(Math.floor(Math.random()*currentTile.length),1)[0]);\n    }\n    return newTile;\n  }\n\n  _onSushiClick = (sushiName) => {\n    //we'll check if the name matches anything in the clicked tile\n    if(this.state.clickedTiles.includes(sushiName)){\n      this.setState({\n        points:0,\n        clickedTiles: [],\n        message: \"Ack, told ya not to do that, you just pooped your pants!\"\n      });\n    }\n    else{\n      let message = \"\";\n      if(this.state.points+1 >= 16){\n        message = \"Holy shit, you ate all 16 sushi's!\";\n      }\n      else if(this.state.points+1 >= 12){\n        message = \"Your stomach is a black hole!\";\n      }\n      else if(this.state.points+1 >= 8){\n        message = \"Wow your abillity to discern sushi is impressive.\";\n      }\n      else if(this.state.points+1 >= 4){\n        message = \"Keep on chugging you goddamn beast!\";\n      }\n      let newClickedTiles = this.state.clickedTiles;\n      newClickedTiles.push(sushiName);\n      let newTile = this.shuffle();\n      let highScore = this.state.highScore;\n      if(this.state.points === this.state.highScore){\n        highScore = this.state.points+1;\n      }\n      this.setState(\n        {  tiles: newTile,\n          points: this.state.points+1,\n          clickedTiles: newClickedTiles,\n          highScore: highScore,\n          message: message\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header message={this.state.message} currentPoint = {this.state.points} highScore = {this.state.highScore}/>\n        {this.state.tiles.map((item,i) => {\n          return(<GameCard key={i} name={item.name} img={item.img} onsushiclick={() => {this._onSushiClick(item.name)}} />);\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}